name: Build Boost, talloc, proot for Android ARM64 (bionic, ananbox compatible, auto-repair)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-all:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (host tools)
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y wget bzip2 tar build-essential ninja-build unzip \
            git python3 curl autoconf automake libtool pkg-config patch python3-setuptools python3-pip

      - name: Cache Android NDK
        id: cache-ndk
        uses: actions/cache@v4
        with:
          path: $HOME/android-ndk
          key: ndk-r26c-${{ runner.os }}

      - name: Download and extract Android NDK (r26c)
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          set -e
          wget https://dl.google.com/android/repository/android-ndk-r26c-linux.zip -O ndk.zip
          unzip -q ndk.zip
          mv android-ndk-r26c $HOME/android-ndk

      - name: Set up Android NDK environment
        run: |
          echo "ANDROID_NDK_HOME=$HOME/android-ndk" >> $GITHUB_ENV
          echo "PATH=$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH" >> $GITHUB_ENV

      # --- BOOST ---
      - name: Download Boost source
        run: |
          set -e
          wget -O boost-1.83.0.tar.xz https://github.com/boostorg/boost/releases/download/boost-1.83.0/boost-1.83.0.tar.xz
          tar -xf boost-1.83.0.tar.xz
          mv boost-1.83.0 boost_1_83_0

      - name: Prepare user-config.jam for Boost
        run: |
          set -e
          ANDROID_API=21
          NDK_HOME="$HOME/android-ndk"
          TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          echo "using clang : android : $TOOLCHAIN/clang++ --target=aarch64-linux-android$ANDROID_API --sysroot=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot ;" > $HOME/user-config.jam

      - name: Bootstrap Boost.Build
        working-directory: ./boost_1_83_0
        run: |
          set -e
          ./bootstrap.sh --with-toolset=clang

      - name: Build Boost for Android arm64-v8a
        working-directory: ./boost_1_83_0
        env:
          ANDROID_API: 21
          NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          set -e
          TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          ./b2 toolset=clang-android \
            cxxflags="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -std=c++14 -fvisibility=hidden" \
            linkflags="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -pie -Wl,--no-undefined -std=c++14" \
            target-os=android \
            address-model=64 \
            architecture=arm \
            abi=aapcs \
            binary-format=elf \
            threading=multi \
            threadapi=pthread \
            variant=release \
            link=static,shared \
            runtime-link=shared \
            --prefix=../boost_android_arm64_install \
            --build-dir=../boost_android_arm64_build \
            --layout=system \
            --user-config=$HOME/user-config.jam \
            --with-date_time \
            --with-filesystem \
            --with-log \
            --with-program_options \
            --with-regex \
            --with-serialization \
            --with-system \
            --with-thread \
            -d+2 install -j$(nproc)

      - name: Package Boost artifacts
        run: |
          set -e
          tar -czvf boost_android_arm64.tar.gz boost_android_arm64_install

      # --- TALLOC ---
      - name: Download and extract talloc
        run: |
          set -e
          wget https://www.samba.org/ftp/talloc/talloc-2.4.2.tar.gz -O talloc-2.4.2.tar.gz
          tar -xf talloc-2.4.2.tar.gz

      - name: Prepare and build talloc for Android arm64
        run: |
          set -e
          cd talloc-2.4.2
          # Подготовка waf через configure/autogen.sh, если waf отсутствует
          if [ ! -f waf ]; then
            if [ -f ./configure ]; then
              echo "[INFO] Running ./configure to generate waf"
              chmod +x configure || true
              ./configure
            elif [ -f autogen.sh ]; then
              echo "[INFO] Running ./autogen.sh to generate waf"
              chmod +x autogen.sh || true
              ./autogen.sh
            else
              echo "::error::Neither configure nor autogen.sh found to generate waf!"
              ls -l
              exit 1
            fi
          fi
          # Проверка после генерации
          if [ ! -f waf ]; then
            echo "::error::waf is missing after ./configure/autogen.sh!"
            ls -l
            exit 1
          fi
          export ANDROID_API=21
          export NDK_HOME="$HOME/android-ndk"
          export TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          export SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          export CC="$TOOLCHAIN/aarch64-linux-android$ANDROID_API-clang"
          export AR="$TOOLCHAIN/llvm-ar"
          export RANLIB="$TOOLCHAIN/llvm-ranlib"
          export CFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -DANDROID"
          export LDFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC"
          echo "::group::Talloc configure"
          python3 ./waf configure --disable-python --without-gettext --cross-compile --destdir=install --prefix=/ --cc="$CC" --ar="$AR" --ranlib="$RANLIB" --extra-cflags="$CFLAGS" --extra-ldflags="$LDFLAGS" || { ls -l ; cat config.log || true; exit 1; }
          echo "::endgroup::"
          echo "::group::Talloc build"
          python3 ./waf build || { tail -100 build/config.log || true; exit 1; }
          echo "::endgroup::"
          echo "::group::Talloc install"
          python3 ./waf install || { tail -100 build/config.log || true; exit 1; }
          echo "::endgroup::"
          ls -l install/lib || true
          ls -l install/include || true

      - name: Package talloc artifacts
        run: |
          set -e
          tar -czvf talloc_android_arm64.tar.gz -C talloc-2.4.2/install .

      # --- PROOT ---
      - name: Clone proot
        run: |
          set -e
          git clone --depth=1 https://github.com/Ananbox/proot.git proot

      - name: Patch proot for Android bionic basename (heredoc, no indent)
        run: |
          set -e
          cd proot
          cat <<'EOF' > basename_patch.h
            #ifdef __ANDROID__
            #include <string.h>
            static char *basename(char *path) {
              int slash_index = -1;
              int i = 0;
              if (path == NULL || *path == '\0')
                return path;
              while (path[i] != '\0') {
                if (path[i] == '/') {
                  slash_index = i;
                }
                i++;
              }
              if (slash_index != -1)
                return path + slash_index + 1;
              return path;
            }
            #else
            #include <libgen.h>
            #endif
          EOF
          PATCH_LINE=$(grep -n "^#include" src/cli/cli.c | head -1 | cut -d: -f1)
          PATCH_LINE=$((PATCH_LINE+1))
          awk "NR==$PATCH_LINE{system(\"cat basename_patch.h\")} 1" src/cli/cli.c > src/cli/cli.c.patched
          mv src/cli/cli.c.patched src/cli/cli.c
          rm basename_patch.h
          cat src/cli/cli.c | head -30 | tee ../proot_patch_preview.log

      - name: Build proot for Android arm64-v8a
        run: |
          set -e
          export ANDROID_API=21
          export NDK_HOME="$HOME/android-ndk"
          export TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          export SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          export CC="$TOOLCHAIN/aarch64-linux-android$ANDROID_API-clang"
          export AR="$TOOLCHAIN/llvm-ar"
          export RANLIB="$TOOLCHAIN/llvm-ranlib"
          export CFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -I$GITHUB_WORKSPACE/talloc-2.4.2/install/include -DANDROID -Wno-deprecated-declarations"
          export LDFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -L$GITHUB_WORKSPACE/talloc-2.4.2/install/lib -ltalloc"
          cd proot/src
          make clean
          make V=1 CC="$CC" LD="$CC" AR="$AR" RANLIB="$RANLIB" STRIP=echo OBJCOPY=echo OBJDUMP=echo CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" > ../../proot_build.log 2>&1 || { tail -100 ../../proot_build.log; exit 1; }
          file proot || true
          cp -v proot $GITHUB_WORKSPACE/libproot.so || { echo "::error::proot binary not built!"; exit 1; }

      - name: Package proot artifacts
        run: |
          set -e
          tar -czvf proot_android_arm64.tar.gz libproot.so

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build_logs
          path: |
            proot_patch_preview.log
            proot_build.log
            talloc-2.4.2/config.log
            talloc-2.4.2/build/config.log

      # --- FINAL ARTIFACTS ---
      - name: Upload Boost artifact
        uses: actions/upload-artifact@v4
        with:
          name: boost_android_arm64
          path: boost_android_arm64.tar.gz

      - name: Upload talloc artifact
        uses: actions/upload-artifact@v4
        with:
          name: talloc_android_arm64
          path: talloc_android_arm64.tar.gz

      - name: Upload proot artifact
        uses: actions/upload-artifact@v4
        with:
          name: proot_android_arm64
          path: proot_android_arm64.tar.gz

      - name: Upload all logs if any error
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error_logs
          path: |
            **/*.log
            talloc-2.4.2/config.log
            talloc-2.4.2/build/config.log
