---
name: Build Boost, talloc, proot for Android ARM64 (bionic, ananbox compatible)

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build-all:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Log checkout
        run: |
          echo "=== Checkout repository ==="
          git checkout main
          if [ $? -ne 0 ]; then
            echo "Error: Failed to checkout repository"
            exit 1
          fi
          git status
          pwd
          echo "Listing .github/workflows/:"
          ls -l .github/workflows/ || echo "Warning: .github/workflows/ not found"

      - name: Install dependencies (host tools)
        run: |
          echo "=== Install dependencies ==="
          sudo apt-get update
          sudo apt-get install -y wget bzip2 tar build-essential ninja-build unzip \
            git python3 curl autoconf automake libtool pkg-config patch
          if [ $? -ne 0 ]; then
            echo "Error: Failed to install dependencies"
            exit 1
          fi
          which patch
          dpkg -l | grep patch

      - name: Cache Android NDK
        id: cache-ndk
        uses: actions/cache@v4
        with:
          path: $HOME/android-ndk
          key: ndk-r26c-${{ runner.os }}

      - name: Download and extract Android NDK (r26c)
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          echo "=== Download and extract Android NDK ==="
          wget https://dl.google.com/android/repository/android-ndk-r26c-linux.zip \
            -O ndk.zip
          unzip -q ndk.zip
          mv android-ndk-r26c $HOME/android-ndk
          if [ $? -ne 0 ]; then
            echo "Error: Failed to download or extract NDK"
            exit 1
          fi
          ls -l $HOME/android-ndk

      - name: Verify Android NDK integrity
        run: |
          echo "=== Verify Android NDK integrity ==="
          if [ ! -f "$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" ]; then
            echo "Error: NDK toolchain is incomplete, aarch64-linux-android21-clang not found"
            exit 1
          fi
          if [ ! -f "$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" ]; then
            echo "Error: NDK toolchain is incomplete, llvm-ar not found"
            exit 1
          fi
          if [ ! -f "$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib" ]; then
            echo "Error: NDK toolchain is incomplete, llvm-ranlib not found"
            exit 1
          fi
          ls -l $HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin

      - name: Set up Android NDK environment
        run: |
          echo "=== Set up Android NDK environment ==="
          echo "ANDROID_NDK_HOME=$HOME/android-ndk" >> $GITHUB_ENV
          echo "PATH=$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH" \
            >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$HOME/android-ndk"
          echo "PATH=$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH"
          echo $PATH

      # --- BOOST ---
      - name: Prepare Boost download script
        run: |
          echo "=== Prepare Boost download script ==="
          cat <<'EOF' > download_boost.sh
          #!/bin/bash
          BOOST_URL="$1"
          BOOST_ARCHIVE="$2"
          MAX_ATTEMPTS=5
          for attempt in $(seq 1 $MAX_ATTEMPTS); do
              echo "Attempt $attempt of $MAX_ATTEMPTS"
              curl -L --progress-bar -o "$BOOST_ARCHIVE" "$BOOST_URL"
              if [ $? -eq 0 ] && [ -s "$BOOST_ARCHIVE" ]; then
                  echo "Download successful."
                  exit 0
              else
                  echo "Download failed, retrying..."
                  sleep 3
              fi
          done
          echo "Error: Failed to download Boost after $MAX_ATTEMPTS attempts"
          exit 1
          EOF
          chmod +x download_boost.sh
          cat download_boost.sh

      - name: Download Boost source
        run: |
          echo "=== Download Boost source ==="
          ./download_boost.sh \
            "https://github.com/boostorg/boost/releases/download/boost-1.83.0/boost-1.83.0.tar.xz" \
            "boost-1.83.0.tar.xz"
          tar -xf boost-1.83.0.tar.xz
          mv boost-1.83.0 boost_1_83_0
          if [ $? -ne 0 ]; then
            echo "Error: Failed to download or extract Boost"
            exit 1
          fi
          ls -l boost_1_83_0

      - name: Prepare user-config.jam for Boost
        run: |
          echo "=== Prepare user-config.jam for Boost ==="
          ANDROID_API=21
          NDK_HOME="$HOME/android-ndk"
          TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          echo "using clang : android : $TOOLCHAIN/clang++ \
            --target=aarch64-linux-android$ANDROID_API \
            --sysroot=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot ;" \
            > $HOME/user-config.jam
          cat $HOME/user-config.jam
          if [ ! -f $HOME/user-config.jam ]; then
            echo "Error: Failed to create user-config.jam"
            exit 1
          fi

      - name: Bootstrap Boost.Build
        working-directory: ./boost_1_83_0
        run: |
          echo "=== Bootstrap Boost.Build ==="
          ./bootstrap.sh --with-toolset=clang
          if [ $? -ne 0 ]; then
            echo "Error: Boost bootstrap failed"
            exit 1
          fi

      - name: Build Boost for Android arm64-v8a
        working-directory: ./boost_1_83_0
        env:
          ANDROID_API: 21
          NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          echo "=== Build Boost for Android arm64-v8a ==="
          TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          ./b2 toolset=clang-android \
            cxxflags="--target=aarch64-linux-android$ANDROID_API \
              --sysroot=$SYSROOT -fPIC -std=c++14 -fvisibility=hidden" \
            linkflags="--target=aarch64-linux-android$ANDROID_API \
              --sysroot=$SYSROOT -fPIC -pie -Wl,--no-undefined -std=c++14" \
            target-os=android \
            address-model=64 \
            architecture=arm \
            abi=aapcs \
            binary-format=elf \
            threading=multi \
            threadapi=pthread \
            variant=release \
            link=static,shared \
            runtime-link=shared \
            --prefix=../boost_android_arm64_install \
            --build-dir=../boost_android_arm64_build \
            --layout=system \
            --user-config=$HOME/user-config.jam \
            --with-date_time --with-filesystem --with-log \
            --with-program_options --with-regex --with-serialization \
            --with-system --with-thread \
            -d+2 install -j$(nproc)
          if [ $? -ne 0 ]; then
            echo "Error: Boost build failed"
            exit 1
          fi

      # --- TALLOC ---
      - name: Download and extract talloc
        run: |
          echo "=== Download and extract talloc ==="
          wget https://www.samba.org/ftp/talloc/talloc-2.4.2.tar.gz \
            -O talloc-2.4.2.tar.gz
          tar -xf talloc-2.4.2.tar.gz
          if [ $? -ne 0 ]; then
            echo "Error: Failed to download or extract talloc"
            exit 1
          fi
          ls -lah talloc-2.4.2

      - name: Patch talloc to skip replace tests
        run: |
          echo "=== Patch talloc to skip replace tests ==="
          cd talloc-2.4.2
          cat > skip-replace-tests.patch <<- 'EOF'
          --- a/lib/replace/wscript
          +++ b/lib/replace/wscript
          @@ -1,5 +1,6 @@
           #!/usr/bin/env python
           
          +import os
           from waflib import Options
           
          @@ -10,6 +11,13 @@ def configure(conf):
               conf.check_python_version((3,5,0))
               conf.check_python_headers()
           
          +    # Skip replace tests for Android
          +    conf.env['SKIP_REPLACE_TESTS'] = True
          +    if conf.env['SKIP_REPLACE_TESTS']:
          +        conf.env['replace_test_sources'] = []
          +        conf.msg('Skipping replace tests', 'Disabled for Android', color='YELLOW')
          +        return
          +
               conf.check_function('strndup', 'string.h')
               conf.check_function('strnlen', 'string.h')
           
          --- a/lib/replace/tests/os2_delete.c
          +++ b/lib/replace/tests/os2_delete.c
          @@ -65,7 +65,9 @@ static int test_readdir_os2_delete(void)
          		closedir(dirp);
          		return -1;
          	}
          +#ifndef SKIP_REPLACE_TESTS
          	off = telldir(dirp);
          +#endif
          	while ((dp = readdir(dirp)) != NULL) {
          		char *fname;
          		if (strncmp(dp->d_name, "test", 4) != 0) {
          @@ -82,7 +84,9 @@ static int test_readdir_os2_delete(void)
          			continue;
          		}
          	}
          +#ifndef SKIP_REPLACE_TESTS
          	seekdir(dirp, off);
          +#endif
          	closedir(dirp);
          	return 0;
           }
          EOF
          patch -p1 < skip-replace-tests.patch
          if [ $? -ne 0 ]; then
            echo "Error: Failed to apply talloc skip-replace-tests patch"
            exit 1
          fi
          grep "SKIP_REPLACE_TESTS" lib/replace/wscript \
            || echo "Warning: SKIP_REPLACE_TESTS not found in wscript"
          grep "#ifndef SKIP_REPLACE_TESTS" lib/replace/tests/os2_delete.c \
            || echo "Warning: SKIP_REPLACE_TESTS not found in os2_delete.c"

      - name: Configure and build talloc static
        run: |
          echo "=== Configure and build talloc static ==="
          export ANDROID_API=21
          export NDK_HOME="$HOME/android-ndk"
          export TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          export SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          export CC="$TOOLCHAIN/aarch64-linux-android$ANDROID_API-clang"
          export AR="$TOOLCHAIN/llvm-ar"
          export RANLIB="$TOOLCHAIN/llvm-ranlib"
          export CFLAGS="--target=aarch64-linux-android$ANDROID_API \
            --sysroot=$SYSROOT -fPIC -DANDROID -Wno-deprecated-declarations"
          export LDFLAGS="--target=aarch64-linux-android$ANDROID_API \
            --sysroot=$SYSROOT -fPIC"
          cd talloc-2.4.2
          cat <<EOF >cross-answers.txt
          Checking uname sysname type: "Linux"
          Checking uname machine type: "dontcare"
          Checking uname release type: "dontcare"
          Checking uname version type: "dontcare"
          Checking simple C program: OK
          rpath library support: OK
          -Wl,--version-script support: FAIL
          Checking getconf LFS_CFLAGS: OK
          Checking for large file support without additional flags: OK
          Checking for -D_FILE_OFFSET_BITS=64: OK
          Checking for -D_LARGE_FILES: OK
          Checking correct behavior of strtoll: OK
          Checking for working strptime: OK
          Checking for C99 vsnprintf: OK
          Checking for HAVE_SHARED_MMAP: OK
          Checking for HAVE_MREMAP: OK
          Checking for HAVE_INCOHERENT_MMAP: OK
          Checking for HAVE_SECURE_MKSTEMP: OK
          Checking getconf large file support flags work: OK
          Checking for HAVE_IFACE_IFCONF: FAIL
          Checking for HAVE_TELLDIR: FAIL
          Checking for HAVE_SEEKDIR: FAIL
          Checking for HAVE_SYS_NDIR_H: FAIL
          Checking for HAVE_SYS_DIR_H: FAIL
          Checking for HAVE_NDIR_H: FAIL
          Checking for HAVE_DIR_H: FAIL
          EOF
          ./configure build --prefix=$PWD/install --disable-rpath \
            --disable-python --cross-compile --cross-answers=cross-answers.txt \
            CC="$CC" AR="$AR" RANLIB="$RANLIB" CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS"
          if [ $? -ne 0 ]; then
            echo "Error: talloc configure failed"
            exit 1
          fi
          make V=1 -j$(nproc) talloc.o
          if [ $? -ne 0 ]; then
            echo "Error: talloc build failed"
            exit 1
          fi
          mkdir -p install/include install/lib
          "$AR" rcs install/lib/libtalloc.a bin/default/talloc*.o
          cp -f talloc.h install/include
          ls -l install/lib install/include

      # --- PROOT ---
      - name: Clone proot
        if: success()
        run: |
          echo "=== Clone proot ==="
          git clone --depth=1 https://github.com/Ananbox/proot.git proot
          if [ $? -ne 0 ]; then
            echo "Error: Failed to clone proot"
            exit 1
          fi
          ls -l proot/src

      - name: Patch proot for Android
        run: |
          echo "=== Patch proot for Android ==="
          cd proot
          cat > android-basename.patch <<- 'EOF'
          --- a/src/cli/cli.c
          +++ b/src/cli/cli.c
          @@ -25,6 +25,24 @@
           #include <string.h>
           #include <ctype.h>
           #include <errno.h>
          +#ifdef __ANDROID__
          +#include <string.h>
          +static char *basename(const char *path) {
          +    char *last_slash = strrchr(path, '/');
          +    if (last_slash == NULL)
          +        return (char *)path;
          +    return last_slash + 1;
          +}
          +#else
          +#include <libgen.h>
          +#endif
           #include <sys/stat.h>
           #include <sys/types.h>
           #include <unistd.h>
          EOF
          patch -p1 < android-basename.patch
          if [ $? -ne 0 ]; then
            echo "Error: Failed to apply proot patch"
            exit 1
          fi
          grep "basename" src/cli/cli.c \
            || echo "Warning: basename patch not applied correctly"

      - name: Build proot for Android arm64-v8a
        if: success()
        run: |
          echo "=== Build proot for Android arm64-v8a ==="
          export ANDROID_API=21
          export NDK_HOME="$HOME/android-ndk"
          export TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          export SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          export CC="$TOOLCHAIN/aarch64-linux-android$ANDROID_API-clang"
          export AR="$TOOLCHAIN/llvm-ar"
          export RANLIB="$TOOLCHAIN/llvm-ar"
          export CFLAGS="--target=aarch64-linux-android$ANDROID_API \
            --sysroot=$SYSROOT -fPIC -I$PWD/talloc-2.4.2/install/include \
            -DANDROID -Wno-deprecated-declarations"
          export LDFLAGS="--target=aarch64-linux-android$ANDROID_API \
            --sysroot=$SYSROOT -fPIC -L$PWD/talloc-2.4.2/install/lib -ltalloc"
          export PROOT_UNBUNDLE_LOADER="$PWD/proot/libexec/proot"
          export PKG_CONFIG_PATH="$PWD/talloc-2.4.2/install/lib/pkgconfig:$PKG_CONFIG_PATH"
          cd proot/src
          make clean
          make V=1 CC="$CC" LD="$CC" STRIP=echo OBJCOPY=echo OBJDUMP=echo \
            CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" PROOT_UNBUNDLE_LOADER="$PROOT_UNBUNDLE_LOADER"
          cp -v proot $GITHUB_WORKSPACE/libproot.so
          if [ $? -ne 0 ]; then
            echo "Error: proot build failed"
            exit 1
          fi
          make clean
          CFLAGS="$CFLAGS -DUSERLAND" \
            make V=1 CC="$CC" LD="$CC" STRIP=echo OBJCOPY=echo OBJDUMP=echo \
            CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" PROOT_UNBUNDLE_LOADER="$PROOT_UNBUNDLE_LOADER"
          cp -v proot $GITHUB_WORKSPACE/proot-userland
          if [ $? -ne 0 ]; then
            echo "Error: proot-userland build failed"
            exit 1
          fi
