name: Build Boost for ARMv8/ARMv9 (Clang, Ananbox compatible)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-boost-armv8:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y \
            clang llvm lld gcc-aarch64-linux-gnu g++-aarch64-linux-gnu \
            wget bzip2 tar build-essential \
            libc6-arm64-cross libstdc++6-arm64-cross libgcc-s1-arm64-cross \
            pkg-config zstd

      - name: Manually fetch missing ARM64 libraries (Ubuntu + Debian fallback)
        run: |
          set -e
          download_and_extract() {
            local url="$1"
            local debfile=$(basename "$url")
            wget -nv "$url" -O "$debfile" || return 1
            ar x "$debfile"
            # Определяем имя data архива
            data_archive=""
            for ext in xz zst gz bz2; do
              if [ -f "data.tar.$ext" ]; then
                data_archive="data.tar.$ext"
                break
              fi
            done
            if [ -z "$data_archive" ]; then
              echo "No data archive in $debfile!"
              return 1
            fi
            # Распаковываем библиотеки, если они есть
            for so in libm.so.6 libmvec.so.1 libc.so.6; do
              sudo tar --wildcards --keep-old-files --extract -f "$data_archive" "./usr/aarch64-linux-gnu/lib/$so" -C / || true
            done
            rm -f "$debfile" control.tar.* data.tar.* debian-binary
          }

          # Пробуем Ubuntu
          download_and_extract "http://archive.ubuntu.com/ubuntu/pool/main/c/cross-toolchain-base/libc6-arm64-cross_2.39-0ubuntu8cross1_all.deb" || true
          # Пробуем Debian
          download_and_extract "http://deb.debian.org/debian/pool/main/c/cross-toolchain-base/libc6-arm64-cross_2.41-6cross2_all.deb" || true

          # Проверка наличия библиотек
          for so in libm.so.6 libmvec.so.1 libc.so.6; do
            if [ ! -f /usr/aarch64-linux-gnu/lib/$so ]; then
              echo "ERROR: /usr/aarch64-linux-gnu/lib/$so missing!"
              exit 1
            fi
          done

          # Проверка и исправление linker script (libm.so)
          if [ -f /usr/aarch64-linux-gnu/lib/libm.so ] && ! file /usr/aarch64-linux-gnu/lib/libm.so | grep -q "ELF"; then
            grep -q "libm.so.6" /usr/aarch64-linux-gnu/lib/libm.so || \
              echo "INPUT (libm.so.6)" | sudo tee /usr/aarch64-linux-gnu/lib/libm.so
          fi

          ls -l /usr/aarch64-linux-gnu/lib/libm.so.6
          ls -l /usr/aarch64-linux-gnu/lib/libmvec.so.1
          ls -l /usr/aarch64-linux-gnu/lib/libc.so.6

      - name: Download Boost
        run: |
          wget -nv https://sourceforge.net/projects/boost/files/boost/1.83.0/boost_1_83_0.tar.bz2/download -O boost_1_83_0.tar.bz2
          tar -xf boost_1_83_0.tar.bz2

      - name: Prepare user-config.jam (Clang + ARMv8 + Ananbox compatible)
        run: |
          echo "using clang : arm : clang++ -target aarch64-linux-gnu --sysroot=/usr/aarch64-linux-gnu ;" > $HOME/user-config.jam

      - name: Bootstrap Boost.Build
        working-directory: ./boost_1_83_0
        run: |
          ./bootstrap.sh --with-toolset=clang

      - name: Build Boost for ARMv8/ARMv9 (Clang, Ananbox compatible)
        working-directory: ./boost_1_83_0
        run: |
          set -e
          ./b2 toolset=clang-arm \
            cxxflags="-target aarch64-linux-gnu --sysroot=/usr/aarch64-linux-gnu -march=armv8-a -fPIC -std=c++14" \
            linkflags="--target=aarch64-linux-gnu --sysroot=/usr/aarch64-linux-gnu -fuse-ld=lld" \
            variant=release \
            threading=multi \
            link=static,shared \
            runtime-link=shared \
            --prefix=../boost_armv8_clang_install \
            --build-dir=../boost_armv8_clang_build \
            --user-config=$HOME/user-config.jam \
            --with-filesystem \
            --with-log \
            --with-serialization \
            --with-system \
            --with-thread \
            --with-program_options \
            install -j$(nproc)

      - name: Diagnostics (list built libs)
        run: |
          find boost_armv8_clang_install -type f

      - name: Package Boost artifacts
        run: |
          tar -czvf boost_armv8_clang.tar.gz boost_armv8_clang_install

      - name: Upload Boost artifact
        uses: actions/upload-artifact@v4
        with:
          name: boost_armv8_clang
          path: boost_armv8_clang.tar.gz
