name: Build Boost, talloc, proot for Android ARM64 (bionic, ananbox compatible)

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  build-all:
    runs-on: ubuntu-22.04 # Закрепляем версию раннера для стабильности кэша

    steps:
      # Клонирование репозитория
      - name: Checkout repository
        uses: actions/checkout@v4

      # Установка зависимостей (инструменты хоста)
      - name: Install dependencies (host tools)
        run: |
          sudo apt-get update
          sudo apt-get install -y wget bzip2 tar build-essential ninja-build unzip git python3 curl autoconf automake libtool pkg-config
          echo "=== Install dependencies ===" >> $GITHUB_WORKSPACE/full_build.log
          sudo apt-get install -y wget bzip2 tar build-essential ninja-build unzip git python3 curl autoconf automake libtool pkg-config >> $GITHUB_WORKSPACE/full_build.log 2>&1

      # Кэширование Android NDK
      - name: Cache Android NDK
        id: cache-ndk
        uses: actions/cache@v4
        with:
          path: $HOME/android-ndk
          key: ndk-r26c-${{ runner.os }}

      # Загрузка и распаковка Android NDK (r26c)
      - name: Download and extract Android NDK (r26c)
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          echo "=== Download and extract Android NDK ===" >> $GITHUB_WORKSPACE/full_build.log
          wget https://dl.google.com/android/repository/android-ndk-r26c-linux.zip -O ndk.zip >> $GITHUB_WORKSPACE/full_build.log 2>&1
          unzip -q ndk.zip >> $GITHUB_WORKSPACE/full_build.log 2>&1
          mv android-ndk-r26c $HOME/android-ndk >> $GITHUB_WORKSPACE/full_build.log 2>&1

      # Проверка целостности Android NDK
      - name: Verify Android NDK integrity
        run: |
          echo "=== Verify Android NDK integrity ===" >> $GITHUB_WORKSPACE/full_build.log
          if [ ! -f "$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang" ]; then
            echo "Error: NDK toolchain is incomplete, aarch64-linux-android21-clang not found" | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log
            exit 1
          fi
          if [ ! -f "$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar" ]; then
            echo "Error: NDK toolchain is incomplete, llvm-ar not found" | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log
            exit 1
          fi
          if [ ! -f "$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ranlib" ]; then
            echo "Error: NDK toolchain is incomplete, llvm-ranlib not found" | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log
            exit 1
          fi
          ls -l $HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin >> $GITHUB_WORKSPACE/full_build.log 2>&1
          ls -l $HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android >> $GITHUB_WORKSPACE/full_build.log 2>&1
          ls -l $HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include >> $GITHUB_WORKSPACE/full_build.log 2>&1
          file $HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang >> $GITHUB_WORKSPACE/full_build.log 2>&1

      # Настройка окружения Android NDK
      - name: Set up Android NDK environment
        run: |
          echo "=== Set up Android NDK environment ===" >> $GITHUB_WORKSPACE/full_build.log
          echo "ANDROID_NDK_HOME=$HOME/android-ndk" >> $GITHUB_ENV
          echo "PATH=$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$HOME/android-ndk" >> $GITHUB_WORKSPACE/full_build.log
          echo "PATH=$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH" >> $GITHUB_WORKSPACE/full_build.log

      # --- BOOST ---
      - name: Prepare Boost download script
        run: |
          echo "=== Prepare Boost download script ===" >> $GITHUB_WORKSPACE/full_build.log
          cat <<'EOF' > download_boost.sh
          #!/bin/bash
          BOOST_URL="$1"
          BOOST_ARCHIVE="$2"
          MAX_ATTEMPTS=5
          for attempt in $(seq 1 $MAX_ATTEMPTS); do
              echo "Attempt $attempt of $MAX_ATTEMPTS"
              curl -L --progress-bar -o "$BOOST_ARCHIVE" "$BOOST_URL"
              if [ $? -eq 0 ] && [ -s "$BOOST_ARCHIVE" ]; then
                  echo "Download successful."
                  exit 0
              else
                  echo "Download failed, retrying..."
                  sleep 3
              fi
          done
          echo "Failed to download Boost after $MAX_ATTEMPTS attempts."
          exit 1
          EOF
          chmod +x download_boost.sh
          cat download_boost.sh >> $GITHUB_WORKSPACE/full_build.log

      - name: Download Boost source (GitHub mirror, with progress & retry)
        run: |
          echo "=== Download Boost source ===" >> $GITHUB_WORKSPACE/full_build.log
          ./download_boost.sh "https://github.com/boostorg/boost/releases/download/boost-1.83.0/boost-1.83.0.tar.xz" "boost-1.83.0.tar.xz" >> $GITHUB_WORKSPACE/full_build.log 2>&1
          tar -xf boost-1.83.0.tar.xz >> $GITHUB_WORKSPACE/full_build.log 2>&1
          mv boost-1.83.0 boost_1_83_0 >> $GITHUB_WORKSPACE/full_build.log 2>&1

      - name: List files after extracting Boost
        run: |
          echo "=== List files after extracting Boost ===" >> $GITHUB_WORKSPACE/full_build.log
          ls -lah >> $GITHUB_WORKSPACE/full_build.log 2>&1

      - name: Prepare user-config.jam for Boost (Android arm64-v8a)
        run: |
          echo "=== Prepare user-config.jam for Boost ===" >> $GITHUB_WORKSPACE/full_build.log
          ANDROID_API=21
          NDK_HOME="$HOME/android-ndk"
          TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          echo "using clang : android : $TOOLCHAIN/clang++ --target=aarch64-linux-android$ANDROID_API --sysroot=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot ;" > $HOME/user-config.jam
          cat $HOME/user-config.jam >> $GITHUB_WORKSPACE/full_build.log

      - name: Bootstrap Boost.Build
        working-directory: ./boost_1_83_0
        run: |
          echo "=== Bootstrap Boost.Build ===" >> $GITHUB_WORKSPACE/full_build.log
          ./bootstrap.sh --with-toolset=clang >> $GITHUB_WORKSPACE/full_build.log 2>&1

      - name: Build Boost for Android arm64-v8a (bionic, only needed libs)
        working-directory: ./boost_1_83_0
        env:
          ANDROID_API: 21
          NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          echo "=== Build Boost for Android arm64-v8a ===" >> $GITHUB_WORKSPACE/full_build.log
          TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          ./b2 toolset=clang-android \
            cxxflags="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -std=c++14 -fvisibility=hidden" \
            linkflags="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -pie -Wl,--no-undefined -std=c++14" \
            target-os=android \
            address-model=64 \
            architecture=arm \
            abi=aapcs \
            binary-format=elf \
            threading=multi \
            threadapi=pthread \
            variant=release \
            link=static,shared \
            runtime-link=shared \
            --prefix=../boost_android_arm64_install \
            --build-dir=../boost_android_arm64_build \
            --layout=system \
            --user-config=$HOME/user-config.jam \
            --with-date_time \
            --with-filesystem \
            --with-log \
            --with-program_options \
            --with-regex \
            --with-serialization \
            --with-system \
            --with-thread \
            -d+2 install -j$(nproc) > boost_build.log 2>&1
          cat boost_build.log >> $GITHUB_WORKSPACE/full_build.log

      - name: Display Boost errors on failure
        if: failure()
        working-directory: ./boost_1_83_0
        run: |
          echo "=== Boost Build Errors ===" | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log
          grep -i -E "error:|[Bb]uild failed" boost_build.log | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log || echo "No errors found in boost_build.log" | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log

      - name: Package Boost artifacts
        run: |
          echo "=== Package Boost artifacts ===" >> $GITHUB_WORKSPACE/full_build.log
          tar -czvf boost_android_arm64.tar.gz -C boost_android_arm64_install . >> $GITHUB_WORKSPACE/full_build.log 2>&1

      - name: Upload Boost build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: boost-build-log
          path: boost_1_83_0/boost_build.log

      - name: Upload Boost artifact
        uses: actions/upload-artifact@v4
        with:
          name: boost_android_arm64
          path: boost_android_arm64.tar.gz

      # --- TALLOC ---
      - name: Download and extract talloc
        run: |
          echo "=== Download and extract talloc ===" >> $GITHUB_WORKSPACE/full_build.log
          wget https://www.samba.org/ftp/talloc/talloc-2.1.10.tar.gz -O talloc-2.1.10.tar.gz >> $GITHUB_WORKSPACE/full_build.log 2>&1
          tar -xf talloc-2.1.10.tar.gz >> $GITHUB_WORKSPACE/full_build.log 2>&1
          ls -lah talloc-2.1.10 >> $GITHUB_WORKSPACE/full_build.log 2>&1

      - name: Check for WAF usage
        run: |
          echo "=== Check for WAF usage ===" >> $GITHUB_WORKSPACE/full_build.log
          if [ -f talloc-2.1.10/wscript ]; then
            echo "Error: talloc-2.1.10 uses WAF, which is not supported for Android cross-compilation. Please use a version with Autotools." | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log
            exit 1
          fi

      - name: Create talloc cross-answers.txt
        run: |
          echo "=== Create talloc cross-answers.txt ===" >> $GITHUB_WORKSPACE/full_build.log
          cat << EOF > talloc-2.1.10/cross-answers.txt
          Checking uname sysname type: "Linux"
          Checking uname machine type: "dontcare"
          Checking uname release type: "dontcare"
          Checking uname version type: "dontcare"
          Checking simple C program: OK
          rpath library support: OK
          -Wl,--version-script support: FAIL
          Checking getconf LFS_CFLAGS: OK
          Checking for large file support without additional flags: OK
          Checking for -D_FILE_OFFSET_BITS=64: OK
          Checking for -D_LARGE_FILES: OK
          Checking correct behavior of strtoll: OK
          Checking for working strptime: OK
          Checking for C99 vsnprintf: OK
          Checking for HAVE_SHARED_MMAP: OK
          Checking for HAVE_MREMAP: OK
          Checking for HAVE_INCOHERENT_MMAP: OK
          Checking for HAVE_SECURE_MKSTEMP: OK
          Checking getconf large file support flags work: OK
          Checking for HAVE_IFACE_IFCONF: FAIL
          Checking for telldir: NO
          Checking for seekdir: NO
          Checking for minix/config.h: NO
          Checking for standards.h: NO
          Checking for vararg.h: NO
          Checking for crypt.h: NO
          Checking for acl/libacl.h: NO
          Checking for compat.h: NO
          Checking for attr/xattr.h: NO
          Checking for dustat.h: NO
          Checking for history.h: NO
          Checking for krb5.h: NO
          Checking for ndir.h: NO
          Checking for shadow.h: NO
          Checking for sys/acl.h: NO
          Checking for sys/attributes.h: NO
          Checking for attr/attributes.h: NO
          Checking for sys/dir.h: NO
          Checking for sys/filio.h: NO
          Checking for sys/filsys.h: NO
          Checking for sys/fs/s5param.h: NO
          Checking for sys/id.h: NO
          Checking for sys/mode.h: NO
          Checking for sys/ndir.h: NO
          Checking for sys/priv.h: NO
          Checking for sys/security.h: NO
          Checking for sys/termio.h: NO
          Checking for stropts.h: NO
          Checking for unix.h: NO
          Checking for netinet/in_ip.h: NO
          Checking for sys/sockio.h: NO
          Checking for direct.h: NO
          Checking for windows.h: NO
          Checking for winsock2.h: NO
          Checking for ws2tcpip.h: NO
          Checking for nss.h: NO
          Checking for sasl/sasl.h: NO
          Checking for security/pam_appl.h: NO
          Checking for rpc/rpc.h: NO
          Checking for rpc/nettype.h: NO
          Checking for sys/sysctl.h: NO
          Checking for sys/fileio.h: NO
          Checking for sys/filesys.h: NO
          Checking for sys/dustat.h: NO
          Checking for xfs/libxfs.h: NO
          Checking for netgroup.h: NO
          Checking for valgrind.h: NO
          Checking for valgrind/valgrind.h: NO
          Checking for valgrind/memcheck.h: NO
          Checking for valgrind/helgrind.h: NO
          Checking for valgrind/callgrind.h: NO
          Checking for nss_common.h: NO
          Checking for nsswitch.h: NO
          Checking for ns_api.h: NO
          Checking for sys/extattr.h: NO
          Checking for sys/ea.h: NO
          Checking for sys/proplist.h: NO
          Checking for sys/atomic.h: NO
          Checking for comparison_fn_t: NO
          Checking for offset_t: NO
          EOF
          cat talloc-2.1.10/cross-answers.txt >> $GITHUB_WORKSPACE/full_build.log

      - name: Configure and build talloc for Android arm64-v8a (autotools)
        run: |
          echo "=== Configure and build talloc ===" >> $GITHUB_WORKSPACE/full_build.log
          export ANDROID_API=21
          export NDK_HOME="$HOME/android-ndk"
          export TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          export SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          export CC="$TOOLCHAIN/aarch64-linux-android$ANDROID_API-clang"
          export AR="$TOOLCHAIN/llvm-ar"
          export RANLIB="$TOOLCHAIN/llvm-ranlib"
          export CFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC"
          export LDFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC"
          cd talloc-2.1.10
          ./configure --host=aarch64-linux-android --prefix=$PWD/install --disable-python --without-gettext --disable-rpath \
            --cross-compile --cross-answers=$PWD/cross-answers.txt \
            CC="$CC" AR="$AR" RANLIB="$RANLIB" CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" \
            ac_cv_func_malloc_0_nonnull=yes ac_cv_func_realloc_0_nonnull=yes ac_cv_func_memcmp_working=yes > configure.log 2>&1
          cat configure.log >> $GITHUB_WORKSPACE/full_build.log
          make V=1 -j$(nproc) > make.log 2>&1
          cat make.log >> $GITHUB_WORKSPACE/full_build.log
          make install > make_install.log 2>&1
          cat make_install.log >> $GITHUB_WORKSPACE/full_build.log

      - name: Display talloc errors on failure
        if: failure()
        run: |
          echo "=== talloc Errors ===" | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log
          for log in talloc-2.1.10/{configure.log,make.log,make_install.log,config.log}; do
            if [ -f "$log" ]; then
              echo "Errors in $log:" | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log
              grep -i -E "error:|configure: error" "$log" | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log || echo "No errors found in $log" | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log
            fi
          done

      - name: Verify talloc install
        run: |
          echo "=== Verify talloc install ===" >> $GITHUB_WORKSPACE/full_build.log
          ls -l talloc-2.1.10/install/lib >> $GITHUB_WORKSPACE/full_build.log 2>&1
          ls -l talloc-2.1.10/install/include >> $GITHUB_WORKSPACE/full_build.log 2>&1

      - name: Package talloc artifacts
        run: |
          echo "=== Package talloc artifacts ===" >> $GITHUB_WORKSPACE/full_build.log
          tar -czvf talloc_android_arm64.tar.gz -C talloc-2.1.10/install . >> $GITHUB_WORKSPACE/full_build.log 2>&1

      - name: Upload talloc logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: talloc-build-logs
          path: |
            talloc-2.1.10/config.log
            talloc-2.1.10/configure.log
            talloc-2.1.10/make.log
            talloc-2.1.10/make_install.log

      - name: Upload talloc artifact
        uses: actions/upload-artifact@v4
        with:
          name: talloc_android_arm64
          path: talloc_android_arm64.tar.gz

      # --- PROOT ---
      - name: Clone proot
        if: success()
        run: |
          echo "=== Clone proot ===" >> $GITHUB_WORKSPACE/full_build.log
          git clone --depth=1 https://github.com/Ananbox/proot.git proot >> $GITHUB_WORKSPACE/full_build.log 2>&1

      - name: Build proot for Android arm64-v8a (with talloc)
        if: success()
        run: |
          echo "=== Build proot for Android arm64-v8a ===" >> $GITHUB_WORKSPACE/full_build.log
          export ANDROID_API=21
          export NDK_HOME="$HOME/android-ndk"
          export TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          export SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          export CC="$TOOLCHAIN/aarch64-linux-android$ANDROID_API-clang"
          export AR="$TOOLCHAIN/llvm-ar"
          export RANLIB="$TOOLCHAIN/llvm-ranlib"
          export CFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -I$PWD/talloc-2.1.10/install/include"
          export LDFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -L$PWD/talloc-2.1.10/install/lib -ltalloc"
          cd proot/src
          make clean > make_clean.log 2>&1
          cat make_clean.log >> $GITHUB_WORKSPACE/full_build.log
          make V=1 CC="$CC" LD="$CC" STRIP=echo OBJCOPY=echo OBJDUMP=echo CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" > make.log 2>&1
          cat make.log >> $GITHUB_WORKSPACE/full_build.log
          cp -v proot $GITHUB_WORKSPACE/libproot.so >> $GITHUB_WORKSPACE/full_build.log 2>&1

      - name: Display proot errors on failure
        if: failure()
        run: |
          echo "=== proot Errors ===" | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log
          for log in proot/src/{make_clean.log,make.log}; do
            if [ -f "$log" ]; then
              echo "Errors in $log:" | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log
              grep -i -E "error:|[Bb]uild failed" "$log" | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log || echo "No errors found in $log" | tee -a $GITHUB_WORKSPACE/full_build.log $GITHUB_WORKSPACE/error_summary.log
            fi
          done

      - name: Package proot artifacts
        if: success()
        run: |
          echo "=== Package proot artifacts ===" >> $GITHUB_WORKSPACE/full_build.log
          tar -czvf proot_android_arm64.tar.gz libproot.so >> $GITHUB_WORKSPACE/full_build.log 2>&1

      - name: Upload proot logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: proot-build-logs
          path: |
            proot/src/make_clean.log
            proot/src/make.log

      - name: Upload proot artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: proot_android_arm64
          path: proot_android_arm64.tar.gz

      # --- Логи ---
      - name: Upload error summary log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: error-summary-log
          path: $GITHUB_WORKSPACE/error_summary.log

      - name: Upload full build log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: full-build-log
          path: $GITHUB_WORKSPACE/full_build.log
