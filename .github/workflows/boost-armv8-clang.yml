---
name: Build Boost, talloc, proot for Android ARM64 (bionic, ananbox compatible)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-all:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install dependencies (host tools)
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y wget bzip2 tar build-essential ninja-build unzip \
            git python3 curl autoconf automake libtool pkg-config patch

      - name: Cache Android NDK
        id: cache-ndk
        uses: actions/cache@v4
        with:
          path: $HOME/android-ndk
          key: ndk-r26c-${{ runner.os }}

      - name: Download and extract Android NDK (r26c)
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          set -e
          wget https://dl.google.com/android/repository/android-ndk-r26c-linux.zip -O ndk.zip
          unzip -q ndk.zip
          mv android-ndk-r26c $HOME/android-ndk

      - name: Set up Android NDK environment
        run: |
          echo "ANDROID_NDK_HOME=$HOME/android-ndk" >> $GITHUB_ENV
          echo "PATH=$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH" >> $GITHUB_ENV

      # --- BOOST ---
      - name: Prepare Boost download script
        run: |
          set -e
          cat <<'EOF' > download_boost.sh
          #!/bin/bash
          BOOST_URL="$1"
          BOOST_ARCHIVE="$2"
          MAX_ATTEMPTS=5
          for attempt in $(seq 1 $MAX_ATTEMPTS); do
            curl -L --progress-bar -o "$BOOST_ARCHIVE" "$BOOST_URL"
            if [ $? -eq 0 ] && [ -s "$BOOST_ARCHIVE" ]; then
              exit 0
            else
              sleep 3
            fi
          done
          echo "Error: Failed to download Boost after $MAX_ATTEMPTS attempts"
          exit 1
          EOF
          chmod +x download_boost.sh

      - name: Download Boost source
        run: |
          set -e
          ./download_boost.sh "https://github.com/boostorg/boost/releases/download/boost-1.83.0/boost-1.83.0.tar.xz" "boost-1.83.0.tar.xz"
          tar -xf boost-1.83.0.tar.xz
          mv boost-1.83.0 boost_1_83_0

      - name: Prepare user-config.jam for Boost
        run: |
          set -e
          ANDROID_API=21
          NDK_HOME="$HOME/android-ndk"
          TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          echo "using clang : android : $TOOLCHAIN/clang++ --target=aarch64-linux-android$ANDROID_API --sysroot=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot ;" > $HOME/user-config.jam

      - name: Bootstrap Boost.Build
        working-directory: ./boost_1_83_0
        run: |
          set -e
          ./bootstrap.sh --with-toolset=clang

      - name: Build Boost for Android arm64-v8a
        working-directory: ./boost_1_83_0
        env:
          ANDROID_API: 21
          NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          set -e
          TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          ./b2 toolset=clang-android \
            cxxflags="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -std=c++14 -fvisibility=hidden" \
            linkflags="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -pie -Wl,--no-undefined -std=c++14" \
            target-os=android \
            address-model=64 \
            architecture=arm \
            abi=aapcs \
            binary-format=elf \
            threading=multi \
            threadapi=pthread \
            variant=release \
            link=static,shared \
            runtime-link=shared \
            --prefix=../boost_android_arm64_install \
            --build-dir=../boost_android_arm64_build \
            --layout=system \
            --user-config=$HOME/user-config.jam \
            --with-date_time \
            --with-filesystem \
            --with-log \
            --with-program_options \
            --with-regex \
            --with-serialization \
            --with-system \
            --with-thread \
            -d+2 install -j$(nproc)

      - name: Package Boost artifacts
        run: |
          set -e
          tar -czvf boost_android_arm64.tar.gz boost_android_arm64_install

      # --- TALLOC ---
      - name: Download and extract talloc
        run: |
          set -e
          wget https://www.samba.org/ftp/talloc/talloc-2.4.2.tar.gz -O talloc-2.4.2.tar.gz
          tar -xf talloc-2.4.2.tar.gz

      - name: Patch talloc to disable tests for cross-compile
        run: |
          set -e
          cd talloc-2.4.2
          # Отключаем любые build_tests и тестовые секции waf, чтобы не строить и не запускать тесты
          sed -i '/def build_tests(ctx):/,/^$/d' wscript
          sed -i '/ctx.recurse.*tests.*/d' wscript
          sed -i '/bld.SAMBA_SUBSYSTEM.*tests.*/d' wscript
          # Можно убедиться, что тесты не упоминаются
          grep -i 'test' wscript || true

      - name: Configure and build talloc static (waf), capture log
        run: |
          set -e
          export ANDROID_API=21
          export NDK_HOME="$HOME/android-ndk"
          export TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          export SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          export CC="$TOOLCHAIN/aarch64-linux-android$ANDROID_API-clang"
          export AR="$TOOLCHAIN/llvm-ar"
          export RANLIB="$TOOLCHAIN/llvm-ranlib"
          export CFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -DANDROID -Wno-deprecated-declarations"
          export LDFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC"
          cd talloc-2.4.2
          {
            python3 ./waf configure \
              --disable-python \
              --without-gettext \
              --prefix=$PWD/install \
              CC="$CC" AR="$AR" RANLIB="$RANLIB" CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS"
            python3 ./waf build -v
            python3 ./waf install
          } 2>&1 | tee ../talloc_build.log

      - name: Package talloc artifacts
        run: |
          set -e
          tar -czvf talloc_android_arm64.tar.gz -C talloc-2.4.2/install .

      # --- PROOT ---
      - name: Clone proot
        run: |
          set -e
          git clone --depth=1 https://github.com/Ananbox/proot.git proot

      - name: Patch proot for Android bionic basename
        run: |
          set -e
          cd proot
          sed -i '1i\
          #ifdef __ANDROID__\n\
          #include <string.h>\n\
          static char *basename(const char *path) {\n\
            char *last_slash = strrchr(path, \'/\');\n\
            if (last_slash == NULL)\n\
                return (char *)path;\n\
            return last_slash + 1;\n\
          }\n\
          #else\n\
          #include <libgen.h>\n\
          #endif\n' src/cli/cli.c

      - name: Build proot for Android arm64-v8a
        run: |
          set -e
          export ANDROID_API=21
          export NDK_HOME="$HOME/android-ndk"
          export TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          export SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          export CC="$TOOLCHAIN/aarch64-linux-android$ANDROID_API-clang"
          export AR="$TOOLCHAIN/llvm-ar"
          export RANLIB="$TOOLCHAIN/llvm-ranlib"
          export CFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -I$PWD/../talloc-2.4.2/install/include -DANDROID -Wno-deprecated-declarations"
          export LDFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -L$PWD/../talloc-2.4.2/install/lib -ltalloc"
          cd proot/src
          make clean
          make V=1 CC="$CC" LD="$CC" STRIP=echo OBJCOPY=echo OBJDUMP=echo CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS"
          cp -v proot $GITHUB_WORKSPACE/libproot.so

      - name: Package proot artifacts
        run: |
          set -e
          tar -czvf proot_android_arm64.tar.gz libproot.so

      # --- FINAL ARTIFACTS ---
      - name: Upload Boost artifact
        uses: actions/upload-artifact@v4
        with:
          name: boost_android_arm64
          path: boost_android_arm64.tar.gz

      - name: Upload talloc artifact
        uses: actions/upload-artifact@v4
        with:
          name: talloc_android_arm64
          path: talloc_android_arm64.tar.gz

      - name: Upload proot artifact
        uses: actions/upload-artifact@v4
        with:
          name: proot_android_arm64
          path: proot_android_arm64.tar.gz

      - name: Upload talloc build log on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: talloc_build_log
          path: talloc_build.log
