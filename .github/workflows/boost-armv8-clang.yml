name: Build Boost, talloc, proot for Android ARM64

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-all:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (host tools)
        run: |
          sudo apt-get update
          sudo apt-get install -y wget bzip2 tar build-essential ninja-build unzip \
            git python3 curl autoconf automake libtool pkg-config patch python3-setuptools python3-pip

      - name: Cache Android NDK
        id: cache-ndk
        uses: actions/cache@v4
        with:
          path: $HOME/android-ndk
          key: ndk-r26c-${{ runner.os }}

      - name: Download and extract Android NDK (r26c)
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r26c-linux.zip -O ndk.zip
          unzip -q ndk.zip
          mv android-ndk-r26c $HOME/android-ndk

      - name: Set up Android NDK environment
        run: |
          echo "ANDROID_NDK_HOME=$HOME/android-ndk" >> $GITHUB_ENV
          echo "PATH=$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH" >> $GITHUB_ENV

      # --- BOOST ---
      - name: Download Boost source
        run: |
          wget -O boost-1.83.0.tar.xz https://github.com/boostorg/boost/releases/download/boost-1.83.0/boost-1.83.0.tar.xz
          tar -xf boost-1.83.0.tar.xz
          mv boost-1.83.0 boost_1_83_0

      - name: Prepare user-config.jam for Boost
        run: |
          ANDROID_API=21
          NDK_HOME="$HOME/android-ndk"
          TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          echo "using clang : android : $TOOLCHAIN/clang++ --target=aarch64-linux-android$ANDROID_API --sysroot=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot ;" > $HOME/user-config.jam

      - name: Bootstrap Boost.Build
        working-directory: ./boost_1_83_0
        run: ./bootstrap.sh --with-toolset=clang

      - name: Build Boost for Android arm64-v8a
        working-directory: ./boost_1_83_0
        env:
          ANDROID_API: 21
          NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          ./b2 toolset=clang-android \
            cxxflags="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -std=c++14 -fvisibility=hidden" \
            linkflags="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -pie -Wl,--no-undefined -std=c++14" \
            target-os=android \
            address-model=64 \
            architecture=arm \
            abi=aapcs \
            binary-format=elf \
            threading=multi \
            threadapi=pthread \
            variant=release \
            link=static,shared \
            runtime-link=shared \
            --prefix=../boost_android_arm64_install \
            --build-dir=../boost_android_arm64_build \
            --layout=system \
            --user-config=$HOME/user-config.jam \
            --with-date_time \
            --with-filesystem \
            --with-log \
            --with-program_options \
            --with-regex \
            --with-serialization \
            --with-system \
            --with-thread \
            -d+2 install -j$(nproc)

      - name: Package Boost artifacts
        run: tar -czvf boost_android_arm64.tar.gz boost_android_arm64_install

      # --- TALLOC: empty replace.h workaround ---
      - name: Download and extract talloc
        run: |
          wget https://www.samba.org/ftp/talloc/talloc-2.4.2.tar.gz -O talloc-2.4.2.tar.gz
          tar -xf talloc-2.4.2.tar.gz

      - name: Build talloc for Android ARM64 (empty replace.h, fixed version/bool/errno/MIN)
        run: |
          set -xe
          cd talloc-2.4.2
          touch replace.h
          export ANDROID_API=21
          export NDK_HOME="$HOME/android-ndk"
          export TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          export SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          export CC="$TOOLCHAIN/aarch64-linux-android$ANDROID_API-clang"
          export AR="$TOOLCHAIN/llvm-ar"
          export RANLIB="$TOOLCHAIN/llvm-ranlib"
          export CFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -DANDROID \
            -DTALLOC_BUILD_VERSION_MAJOR=2 -DTALLOC_BUILD_VERSION_MINOR=4 -DTALLOC_BUILD_VERSION_RELEASE=2 \
            -include stdbool.h -include string.h -include errno.h -include limits.h -include sys/param.h -DMIN(a,b)=((a)<(b)?(a):(b))"
          export LDFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC"
          mkdir -p install/include install/lib
          $CC $CFLAGS -c talloc.c -o talloc.o
          $AR rcs libtalloc.a talloc.o
          cp talloc.h install/include/
          cp libtalloc.a install/lib/
          ls -al install/include
          ls -al install/lib

      - name: Create talloc.pc for pkg-config
        run: |
          mkdir -p talloc-2.4.2/install/lib/pkgconfig
          echo 'prefix=${pcfiledir}/../..' > talloc-2.4.2/install/lib/pkgconfig/talloc.pc
          echo 'exec_prefix=${prefix}' >> talloc-2.4.2/install/lib/pkgconfig/talloc.pc
          echo 'libdir=${exec_prefix}/lib' >> talloc-2.4.2/install/lib/pkgconfig/talloc.pc
          echo 'includedir=${prefix}/include' >> talloc-2.4.2/install/lib/pkgconfig/talloc.pc
          echo '' >> talloc-2.4.2/install/lib/pkgconfig/talloc.pc
          echo 'Name: talloc' >> talloc-2.4.2/install/lib/pkgconfig/talloc.pc
          echo 'Description: Hierarchical pool based memory allocator with destructors' >> talloc-2.4.2/install/lib/pkgconfig/talloc.pc
          echo 'Version: 2.4.2' >> talloc-2.4.2/install/lib/pkgconfig/talloc.pc
          echo 'Libs: -L${libdir} -ltalloc' >> talloc-2.4.2/install/lib/pkgconfig/talloc.pc
          echo 'Cflags: -I${includedir}' >> talloc-2.4.2/install/lib/pkgconfig/talloc.pc

      - name: Package talloc artifacts
        run: tar -czvf talloc_android_arm64.tar.gz -C talloc-2.4.2/install .

      # --- PROOT ---
      - name: Clone proot
        run: git clone --depth=1 https://github.com/Ananbox/proot.git proot

      - name: Overwrite proot sources with custom files
        run: |
          wget https://raw.githubusercontent.com/AkinAb55/boost-armv8-build/main/binding.c   -O proot/src/path/binding.c
          wget https://raw.githubusercontent.com/AkinAb55/boost-armv8-build/main/binding.h   -O proot/src/path/binding.h
          wget https://raw.githubusercontent.com/AkinAb55/boost-armv8-build/main/enter.c     -O proot/src/syscall/enter.c
          wget https://raw.githubusercontent.com/AkinAb55/boost-armv8-build/main/ptrace.c    -O proot/src/ptrace/ptrace.c
          wget https://raw.githubusercontent.com/AkinAb55/boost-armv8-build/main/mem.h       -O proot/src/tracee/mem.h
          grep -q 'tracee/mem.h' proot/src/tracee/tracee.c || \
            sed -i '/#include "tracee\/tracee.h"/a #include "tracee/mem.h"' proot/src/tracee/tracee.c
          rm -rf proot/src/extension/python

      - name: Overwrite GNUmakefile with safe minimal version
        run: |
          echo "VPATH := \$(dir \$(lastword \$(MAKEFILE_LIST)))" > proot/src/GNUmakefile
          echo "SRC    = \$(dir \$(firstword \$(MAKEFILE_LIST)))" >> proot/src/GNUmakefile
          echo "CC ?= gcc" >> proot/src/GNUmakefile
          echo "LD ?= \$(CC)" >> proot/src/GNUmakefile
          echo "AR ?= ar" >> proot/src/GNUmakefile
          echo "RANLIB ?= ranlib" >> proot/src/GNUmakefile
          echo "CPPFLAGS += -D_FILE_OFFSET_BITS=64 -D_GNU_SOURCE -I. -I\$(VPATH) -I\$(VPATH)/../lib/uthash/include" >> proot/src/GNUmakefile
          echo "CFLAGS   += -g -Wall -Wextra -O2" >> proot/src/GNUmakefile
          echo "CFLAGS   += \$(shell pkg-config --cflags talloc)" >> proot/src/GNUmakefile
          echo "LDFLAGS  += -Wl,-z,noexecstack" >> proot/src/GNUmakefile
          echo "LDFLAGS  += \$(shell pkg-config --libs talloc)" >> proot/src/GNUmakefile
          echo "OBJECTS += \\" >> proot/src/GNUmakefile
          echo "	cli/cli.o cli/proot.o cli/note.o \\" >> proot/src/GNUmakefile
          echo "	execve/enter.o execve/exit.o execve/shebang.o execve/elf.o execve/ldso.o execve/auxv.o execve/aoxp.o \\" >> proot/src/GNUmakefile
          echo "	path/binding.o path/glue.o path/canon.o path/path.o path/proc.o path/temp.o \\" >> proot/src/GNUmakefile
          echo "	syscall/seccomp.o syscall/syscall.o syscall/chain.o syscall/enter.o syscall/exit.o syscall/sysnum.o syscall/socket.o syscall/heap.o syscall/rlimit.o \\" >> proot/src/GNUmakefile
          echo "	tracee/tracee.o tracee/mem.o tracee/reg.o tracee/event.o \\" >> proot/src/GNUmakefile
          echo "	ptrace/ptrace.o ptrace/user.o ptrace/wait.o \\" >> proot/src/GNUmakefile
          echo "	extension/extension.o extension/kompat/kompat.o extension/fake_id0/fake_id0.o extension/link2symlink/link2symlink.o extension/portmap/portmap.o extension/portmap/map.o loader/loader-wrapped.o" >> proot/src/GNUmakefile
          echo ".DEFAULT_GOAL = proot" >> proot/src/GNUmakefile
          echo "all: proot" >> proot/src/GNUmakefile
          echo "proot: \$(OBJECTS)" >> proot/src/GNUmakefile
          echo "	\$(LD) -o \$@ \$^ \$(LDFLAGS)" >> proot/src/GNUmakefile
          echo "%.o: %.c" >> proot/src/GNUmakefile
          echo "	@mkdir -p \$(dir \$@)" >> proot/src/GNUmakefile
          echo "	\$(CC) \$(CPPFLAGS) \$(CFLAGS) -MD -c \$(SRC)\$< -o \$@" >> proot/src/GNUmakefile
          echo "clean:" >> proot/src/GNUmakefile
          echo "	rm -f \$(OBJECTS) proot" >> proot/src/GNUmakefile

      - name: Patch proot for Android bionic basename (no heredoc)
        run: |
          set -e
          cd proot
          echo '#ifdef __ANDROID__
          #include <string.h>
          static char *basename(char *path) {
              if (!path || *path == '\''\0'\'') {
                  return path;
              }
              int last_slash = -1;
              int i = 0;
              while (path[i] != '\''\0'\'') {
                  if (path[i] == '\''/'\'') {
                      last_slash = i;
                  }
                  i++;
              }
              if (last_slash != -1) {
                  return path + last_slash + 1;
              }
              return path;
          }
          #else
          #include <libgen.h>
          #endif' > basename_patch.h
          PATCH_LINE=$(grep -n "^#include" src/cli/cli.c | head -1 | cut -d: -f1)
          PATCH_LINE=$((PATCH_LINE+1))
          awk "NR==$PATCH_LINE{system(\"cat basename_patch.h\")} 1" src/cli/cli.c > src/cli/cli.c.patched
          mv src/cli/cli.c.patched src/cli/cli.c
          rm basename_patch.h
          cat src/cli/cli.c | head -30 | tee ../proot_patch_preview.log

      - name: Build proot for Android arm64-v8a
        run: |
          set -e
          export ANDROID_API=21
          export NDK_HOME="$HOME/android-ndk"
          export TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          export SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          export CC="$TOOLCHAIN/aarch64-linux-android$ANDROID_API-clang"
          export AR="$TOOLCHAIN/llvm-ar"
          export RANLIB="$TOOLCHAIN/llvm-ranlib"
          export CFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -I$GITHUB_WORKSPACE/talloc-2.4.2/install/include -DANDROID -Wno-deprecated-declarations"
          export LDFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -L$GITHUB_WORKSPACE/talloc-2.4.2/install/lib -ltalloc"
          export PKG_CONFIG_PATH="$GITHUB_WORKSPACE/talloc-2.4.2/install/lib/pkgconfig:$PKG_CONFIG_PATH"
          cd proot/src
          make clean || true
          make V=1 CC="$CC" LD="$CC" AR="$AR" RANLIB="$RANLIB" STRIP=echo OBJCOPY=echo OBJDUMP=echo CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" > ../../proot_build.log 2>&1 || { tail -100 ../../proot_build.log; exit 1; }
          file proot || true
          cp -v proot $GITHUB_WORKSPACE/libproot.so || { echo "::error::proot binary not built!"; exit 1; }

      - name: Package proot artifacts
        run: tar -czvf proot_android_arm64.tar.gz libproot.so

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build_logs
          path: |
            proot_patch_preview.log
            proot_build.log
            talloc-2.4.2/config.log
            talloc-2.4.2/build/config.log

      # --- FINAL ARTIFACTS ---
      - name: Upload Boost artifact
        uses: actions/upload-artifact@v4
        with:
          name: boost_android_arm64
          path: boost_android_arm64.tar.gz

      - name: Upload talloc artifact
        uses: actions/upload-artifact@v4
        with:
          name: talloc_android_arm64
          path: talloc_android_arm64.tar.gz

      - name: Upload proot artifact
        uses: actions/upload-artifact@v4
        with:
          name: proot_android_arm64
          path: proot_android_arm64.tar.gz

      - name: Upload all logs if any error
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error_logs
          path: |
            **/*.log
            talloc-2.4.2/config.log
            talloc-2.4.2/build/config.log
