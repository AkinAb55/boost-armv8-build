name: Build Boost, talloc, proot for Android ARM64 (minimal talloc)

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-all:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (host tools)
        run: |
          sudo apt-get update
          sudo apt-get install -y wget bzip2 tar build-essential ninja-build unzip \
            git python3 curl autoconf automake libtool pkg-config patch python3-setuptools python3-pip

      - name: Cache Android NDK
        id: cache-ndk
        uses: actions/cache@v4
        with:
          path: $HOME/android-ndk
          key: ndk-r26c-${{ runner.os }}

      - name: Download and extract Android NDK (r26c)
        if: steps.cache-ndk.outputs.cache-hit != 'true'
        run: |
          wget https://dl.google.com/android/repository/android-ndk-r26c-linux.zip -O ndk.zip
          unzip -q ndk.zip
          mv android-ndk-r26c $HOME/android-ndk

      - name: Set up Android NDK environment
        run: |
          echo "ANDROID_NDK_HOME=$HOME/android-ndk" >> $GITHUB_ENV
          echo "PATH=$HOME/android-ndk/toolchains/llvm/prebuilt/linux-x86_64/bin:$PATH" >> $GITHUB_ENV

      # --- BOOST ---
      - name: Download Boost source
        run: |
          wget -O boost-1.83.0.tar.xz https://github.com/boostorg/boost/releases/download/boost-1.83.0/boost-1.83.0.tar.xz
          tar -xf boost-1.83.0.tar.xz
          mv boost-1.83.0 boost_1_83_0

      - name: Prepare user-config.jam for Boost
        run: |
          ANDROID_API=21
          NDK_HOME="$HOME/android-ndk"
          TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          echo "using clang : android : $TOOLCHAIN/clang++ --target=aarch64-linux-android$ANDROID_API --sysroot=$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot ;" > $HOME/user-config.jam

      - name: Bootstrap Boost.Build
        working-directory: ./boost_1_83_0
        run: |
          ./bootstrap.sh --with-toolset=clang

      - name: Build Boost for Android arm64-v8a
        working-directory: ./boost_1_83_0
        env:
          ANDROID_API: 21
          NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
        run: |
          TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          ./b2 toolset=clang-android \
            cxxflags="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -std=c++14 -fvisibility=hidden" \
            linkflags="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -pie -Wl,--no-undefined -std=c++14" \
            target-os=android \
            address-model=64 \
            architecture=arm \
            abi=aapcs \
            binary-format=elf \
            threading=multi \
            threadapi=pthread \
            variant=release \
            link=static,shared \
            runtime-link=shared \
            --prefix=../boost_android_arm64_install \
            --build-dir=../boost_android_arm64_build \
            --layout=system \
            --user-config=$HOME/user-config.jam \
            --with-date_time \
            --with-filesystem \
            --with-log \
            --with-program_options \
            --with-regex \
            --with-serialization \
            --with-system \
            --with-thread \
            -d+2 install -j$(nproc)

      - name: Package Boost artifacts
        run: |
          tar -czvf boost_android_arm64.tar.gz boost_android_arm64_install

      # --- TALLOC: talloc.c с минимальной поддержкой lib/replace ---
      - name: Download and extract talloc
        run: |
          wget https://www.samba.org/ftp/talloc/talloc-2.4.2.tar.gz -O talloc-2.4.2.tar.gz
          tar -xf talloc-2.4.2.tar.gz

      - name: Build talloc for Android ARM64 (with minimal lib/replace)
        run: |
          set -xe
          cd talloc-2.4.2

          # Создаём минимальный config.h для lib/replace
          echo -e "#ifndef TALLOC_DUMMY_CONFIG_H\n#define TALLOC_DUMMY_CONFIG_H\n\n#define HAVE_STDINT_H 1\n#define HAVE_STDDEF_H 1\n#define HAVE_ALLOCA_H 1\n#define HAVE_INTTYPES_H 1\n#define HAVE_SYS_TYPES_H 1\n#define HAVE_SYS_STAT_H 1\n#define HAVE_SYS_TIME_H 1\n#define HAVE_TIME_H 1\n#define HAVE_UNISTD_H 1\n#define HAVE_STRING_H 1\n#define HAVE_MEMORY_H 1\n#define HAVE_LIMITS_H 1\n#define HAVE_ASSERT_H 1\n#define HAVE_STDLIB_H 1\n#define HAVE_STDARG_H 1\n#define HAVE_SYS_MMAN_H 1\n#define HAVE_SYS_RESOURCE_H 1\n#define HAVE_SYS_WAIT_H 1\n#define HAVE_SYSLOG_H 1\n#define HAVE_SETENV 1\n#define HAVE_UNSETENV 1\n#define HAVE_SNPRINTF 1\n#define HAVE_VSNPRINTF 1\n#define HAVE_ASPRINTF 1\n#define HAVE_VASPRINTF 1\n#define HAVE_GETPAGESIZE 1\n#define HAVE_MMAP 1\n#define HAVE_SYS_SOCKET_H 1\n\n#define HAVE_BOOL 1\n#define HAVE__BOOL 1\n#define HAVE_STDBOOL_H 1\n\n#define _GNU_SOURCE 1\n#define _POSIX_SOURCE 1\n#define _POSIX_C_SOURCE 200809L\n\n#define __STDC_WANT_LIB_EXT1__ 1\n\n#endif" > config.h

          # Копируем config.h в lib/replace
          cp config.h lib/replace/

          # Предварительный анализ и вывод содержимого файлов
          echo "=== Original replace.h ==="
          cat lib/replace/replace.h
          echo "=== End of replace.h ==="
          echo "=== Original .c files in lib/replace ==="
          for file in lib/replace/*.c; do
            echo "Content of $file:"
            cat "$file"
            echo "-------------------"
          done

          # Анализ содержимого для динамического патча
          echo "Analyzing replace.h for typedef conflicts..."
          PATTERNS=()
          if grep -q "typedef.*intptr_t" lib/replace/replace.h; then
            PATTERNS+=("typedef.*intptr_t")
          fi
          if grep -q "typedef.*uintptr_t" lib/replace/replace.h; then
            PATTERNS+=("typedef.*uintptr_t")
          fi
          if grep -q "typedef.*ptrdiff_t" lib/replace/replace.h; then
            PATTERNS+=("typedef.*ptrdiff_t")
          fi
          if grep -q "typedef.*useconds_t" lib/replace/replace.h; then
            PATTERNS+=("typedef.*useconds_t")
          fi
          RTLD_NEEDED=false
          for file in lib/replace/*.c; do
            if grep -q "RTLD_DEFAULT" "$file"; then
              RTLD_NEEDED=true
              break
            fi
          done

          # Применение патча на основе анализа
          if [ ${#PATTERNS[@]} -gt 0 ]; then
            echo "Patching replace.h to remove conflicting typedefs: ${PATTERNS[*]}"
            for pattern in "${PATTERNS[@]}"; do
              sed -i "/$pattern/d" lib/replace/replace.h
            done
          fi
          if [ "$RTLD_NEEDED" = true ]; then
            echo "Adding RTLD_DEFAULT definition to replace.h"
            echo "#ifndef RTLD_DEFAULT" >> lib/replace/replace.h
            echo "#define RTLD_DEFAULT ((void *)0)" >> lib/replace/replace.h
            echo "#endif" >> lib/replace/replace.h
          fi

          # Вывод патched replace.h
          echo "=== Patched replace.h ==="
          cat lib/replace/replace.h
          echo "=== End of patched replace.h ==="

          export ANDROID_API=21
          export NDK_HOME="$HOME/android-ndk"
          export TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          export SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          export CC="$TOOLCHAIN/aarch64-linux-android$ANDROID_API-clang"
          export AR="$TOOLCHAIN/llvm-ar"
          export RANLIB="$TOOLCHAIN/llvm-ranlib"
          export CFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -DANDROID -I$PWD -I$PWD/lib/replace -std=c99"
          export LDFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC"

          mkdir -p install/include install/lib

          # Компилируем файлы из lib/replace
          cd lib/replace
          for src in *.c; do
            $CC $CFLAGS -c "$src" -o "${src%.c}.o"
          done
          $AR rcs libreplacestub.a *.o
          cd ../..

          # Компилируем talloc.c
          $CC $CFLAGS -c talloc.c -o talloc.o

          # Создаём libtalloc.a, включая объекты из lib/replace
          $AR rcs libtalloc.a talloc.o lib/replace/*.o

          # Копируем заголовочные файлы и библиотеку
          cp talloc.h install/include/
          cp lib/replace/replace.h install/include/
          cp config.h install/include/
          cp libtalloc.a install/lib/

          ls -al install/include
          ls -al install/lib

      - name: Package talloc artifacts
        run: |
          tar -czvf talloc_android_arm64.tar.gz -C talloc-2.4.2/install .

      # --- PROOT ---
      - name: Clone proot
        run: |
          git clone --depth=1 https://github.com/Ananbox/proot.git proot

      - name: Patch proot for Android bionic basename (no heredoc)
        run: |
          set -e
          cd proot
          echo -e "#ifdef __ANDROID__\n#include <string.h>\nstatic char *basename(char *path) {\n  int slash_index = -1;\n  int i = 0;\n  if (path == NULL || *path == '\\0')\n    return path;\n  while (path[i] != '\\0') {\n    if (path[i] == '/') {\n      slash_index = i;\n    }\n    i++;\n  }\n  if (slash_index != -1)\n    return path + slash_index + 1;\n  return path;\n}\n#else\n#include <libgen.h>\n#endif" > basename_patch.h
          PATCH_LINE=$(grep -n "^#include" src/cli/cli.c | head -1 | cut -d: -f1)
          PATCH_LINE=$((PATCH_LINE+1))
          awk "NR==$PATCH_LINE{system(\"cat basename_patch.h\")} 1" src/cli/cli.c > src/cli/cli.c.patched
          mv src/cli/cli.c.patched src/cli/cli.c
          rm basename_patch.h
          cat src/cli/cli.c | head -30 | tee ../proot_patch_preview.log

      - name: Build proot for Android arm64-v8a
        run: |
          set -e
          export ANDROID_API=21
          export NDK_HOME="$HOME/android-ndk"
          export TOOLCHAIN="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin"
          export SYSROOT="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/sysroot"
          export CC="$TOOLCHAIN/aarch64-linux-android$ANDROID_API-clang"
          export AR="$TOOLCHAIN/llvm-ar"
          export RANLIB="$TOOLCHAIN/llvm-ranlib"
          export CFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -I$GITHUB_WORKSPACE/talloc-2.4.2/install/include -DANDROID -Wno-deprecated-declarations"
          export LDFLAGS="--target=aarch64-linux-android$ANDROID_API --sysroot=$SYSROOT -fPIC -L$GITHUB_WORKSPACE/talloc-2.4.2/install/lib -ltalloc"
          export PKG_CONFIG_PATH="$GITHUB_WORKSPACE/talloc-2.4.2/install/lib/pkgconfig:$PKG_CONFIG_PATH"
          cd proot/src
          make clean || true
          make V=1 CC="$CC" LD="$CC" AR="$AR" RANLIB="$RANLIB" STRIP=echo OBJCOPY=echo OBJDUMP=echo CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS" > ../../proot_build.log 2>&1 || { tail -100 ../../proot_build.log; exit 1; }
          file proot || true
          cp -v proot $GITHUB_WORKSPACE/libproot.so || { echo "::error::proot binary not built!"; exit 1; }

      - name: Package proot artifacts
        run: |
          tar -czvf proot_android_arm64.tar.gz libproot.so

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build_logs
          path: |
            proot_patch_preview.log
            proot_build.log
            talloc-2.4.2/config.log
            talloc-2.4.2/build/config.log

      # --- FINAL ARTIFACTS ---
      - name: Upload Boost artifact
        uses: actions/upload-artifact@v4
        with:
          name: boost_android_arm64
          path: boost_android_arm64.tar.gz

      - name: Upload talloc artifact
        uses: actions/upload-artifact@v4
        with:
          name: talloc_android_arm64
          path: talloc_android_arm64.tar.gz

      - name: Upload proot artifact
        uses: actions/upload-artifact@v4
        with:
          name: proot_android_arm64
          path: proot_android_arm64.tar.gz

      - name: Upload all logs if any error
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error_logs
          path: |
            **/*.log
            talloc-2.4.2/config.log
            talloc-2.4.2/build/config.log
